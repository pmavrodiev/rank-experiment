// Generated by CoffeeScript 1.3.3
(function() {

  window.rank_experiment = (function() {

    function rank_experiment() {
      this.compositeG = document.getElementById("svgCanvas");
      this.circleCanvas = document.getElementById("circleCanvas");
      this.majorCircle = document.getElementById("majorCircle");
      this.targetCircle = document.getElementById("targetCircle");
      this.rememberTargetCircle = this.circleCanvas.createSVGPoint();
      this.currentGuess = document.getElementById("currentGuess");
      this.angleLine = document.getElementById("angleLine");
      this.rankText = document.getElementById("rankText");
      this.angleText = document.getElementById("angleText");
      this.msgText = document.getElementById("msgText");
      this.viewport_size = 1050;
      this.viewport_axis_x = 525;
      this.viewport_axis_y = 490;
      this.zoom_scale = 0.2;
      this.zoom_level = 1;
      this.previous_angle = Math.PI / 2;
      this.rankTextOpacity = 1;
      this.timedHover;
      this.isMacWebKit = navigator.userAgent.indexOf("Macintosh") !== -1 && navigator.userAgent.indexOf("WebKit") !== -1;
      this.isFirefox = navigator.userAgent.indexOf("Gecko") !== -1;
      window.addEventListener('onload', this.windowListen(), false);
    }

    rank_experiment.prototype.windowListen = function() {
      var ccMouseClick, ccMouseMove, ccMouseWheel, getCursorPosition, init, restartGuessingTask,
        _this = this;
      getCursorPosition = function(e) {
        var pt, pt2, transformation_matrix;
        pt = _this.circleCanvas.createSVGPoint();
        pt.x = e.x;
        pt.y = e.y;
        transformation_matrix = _this.compositeG.getScreenCTM();
        pt2 = pt.matrixTransform(transformation_matrix.inverse());
        return pt2;
      };
      ccMouseWheel = function(event) {
        var circleParent, circleScaled, deltaX, deltaY, e, s, smatrix, tm, tm2, tmparent, tmscaled, tmscaledtranslated, translation_x, translation_y, zoom, zoomLevel;
        e = event || window.event;
        deltaX = e.deltaX * -30 || e.wheelDeltaX / 40 || 0;
        deltaY = e.deltaY * -30 || e.wheelDeltaY / 109 || (e.wheelDeltaY === void 0 && e.wheelDelta / 109) || e.detail * -10 || 0;
        zoom = 0;
        if (deltaY > 0) {
          zoom = 1;
        }
        if (deltaY < 0) {
          zoom = -1;
        }
        /*  
        Most browsers generate one event with delta 120 per mousewheel click.
        On Macs, however, the mousewheels seem to be velocity-sensitive and
             the delta values are often larger multiples of 120, at
        least with the Apple Mouse. Use browser-testing to defeat this.
        */

        if (_this.isMacWebKit) {
          deltaX /= 30;
          deltaY /= 30;
        }
        if (_this.isFirefox && e.type !== "DOMMouseScroll") {
          _this.circleCanvas.removeEventListener("DOMMouseScroll", ccMouseWheel, false);
        }
        if (e.preventDefault) {
          e.preventDefault();
        }
        if (e.stopPropagation) {
          e.stopPropagation();
        }
        e.cancelBubble = true;
        e.returnValue = false;
        zoomLevel = Math.pow(1 + _this.zoom_scale, deltaY);
        if (_this.zoom_level === 1) {
          _this.rememberTargetCircle.x = _this.targetCircle.cx.baseVal.value;
          _this.rememberTargetCircle.y = _this.targetCircle.cy.baseVal.value;
        }
        if (zoomLevel > 1) {
          _this.zoom_level++;
        } else {
          _this.zoom_level--;
        }
        tm = _this.compositeG.getScreenCTM();
        tmscaled = tm.scale(zoomLevel);
        tmparent = _this.circleCanvas.getScreenCTM();
        circleParent = _this.rememberTargetCircle.matrixTransform(tm);
        circleScaled = circleParent.matrixTransform(tmscaled.inverse());
        translation_x = circleScaled.x - _this.rememberTargetCircle.x;
        translation_y = circleScaled.y - _this.rememberTargetCircle.y;
        tmscaledtranslated = tmscaled.translate(translation_x, translation_y);
        smatrix = tmparent.inverse().multiply(tmscaledtranslated);
        s = "matrix(" + smatrix.a + "," + smatrix.b + "," + smatrix.c + "," + smatrix.d + "," + smatrix.e + "," + smatrix.f + ")";
        _this.compositeG.setAttribute("transform", s);
        tm2 = _this.compositeG.getScreenCTM();
        return false;
      };
      ccMouseClick = function(e) {
        var coord, radius;
        coord = getCursorPosition(e);
        _this.previous_angle = Math.atan2(coord.y, coord.x);
        radius = _this.majorCircle.attributes[3].value;
        _this.currentGuess.setAttribute("cx", radius * Math.cos(_this.previous_angle));
        _this.currentGuess.setAttribute("cy", radius * Math.sin(_this.previous_angle));
        _this.circleCanvas.getElementsByTagName('animate')[0].beginElement();
        _this.circleCanvas.removeEventListener('mousemove', ccMouseMove);
        _this.circleCanvas.removeEventListener('click', ccMouseClick);
        _this.msgText.textContent = "Wait for your opponents to guess...";
        _this.msgText.style.fill = "green";
        _this.rankTextOpacity = 1;
        return setTimeout(restartGuessingTask, 4000);
      };
      ccMouseMove = function(e) {
        var angle, coord, radius;
        coord = getCursorPosition(e);
        angle = Math.atan2(coord.y, coord.x);
        radius = _this.majorCircle.attributes[3].value;
        _this.angleLine.setAttribute("x2", radius * Math.cos(angle));
        _this.angleLine.setAttribute("y2", radius * Math.sin(angle));
        _this.targetCircle.setAttribute("cx", radius * Math.cos(angle));
        return _this.targetCircle.setAttribute("cy", radius * Math.sin(angle));
      };
      restartGuessingTask = function() {
        _this.rankText.textContent = "Your new rank is: " + Math.ceil(Math.random() * 20);
        _this.rankText.style.fill = "black";
        _this.rankTextOpacity = 1;
        return _this.circleCanvas.addEventListener('click', ccMouseClick, false);
      };
      init = function() {
        _this.compositeG.addEventListener('mousemove', ccMouseMove, false);
        _this.circleCanvas.addEventListener('click', ccMouseClick, false);
        _this.circleCanvas.onwheel = ccMouseWheel;
        _this.circleCanvas.onmousewheel = ccMouseWheel;
        if (_this.isFirefox) {
          _this.circleCanvas.addEventListener("DOMMouseScroll", ccMouseWheel, false);
        }
        return _this.rankText.textContent = "";
      };
      return init();
    };

    return rank_experiment;

  })();

}).call(this);
